datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid()) @map("_id")
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  phone         String?
  university    String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  sessions      Session[]

  Comment Comment[]

  Purchase Purchase[]
  notifications Notification[]
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationRequest {
  id         String   @id @default(cuid()) @map("_id")
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Course {
  id          String   @id @default(cuid()) @map("_id")
  title       String
  description String
  imageUrl    String
  videoUrl    String?
  gdlink      String?
  university  String
  program     String
  semester    String
  price       Float
  content     Content[] @relation("CourseContent")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  Purchase Purchase[]
  notifications Notification[]
}
model Content {
  id          String   @id @default(cuid()) @map("_id")
  type        String
  title       String
  description String?
  thumbnail   String?
  videoUrl    String?
  pdfUrl      String?
  position    Int
  parentId    String? 
  parent      Content?   @relation("ContentToParent", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children    Content[]  @relation("ContentToParent")  
  courseId    String?
  course      Course?   @relation("CourseContent", fields: [courseId], references: [id]) 
  createdAt   DateTime @default(now())
  @@index([position])
  @@index([parentId])
  @@index([courseId])
  Comment Comment[]
}

model Comment {
  id           String      @id @default(cuid()) @map("_id")
  content      String
  contentId    String
  commentedOn  Content     @relation(fields: [contentId], references: [id])
  parentId     String?
  parent       Comment?    @relation("ParentComment", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children     Comment[]   @relation("ParentComment")
  userId       String
  user         User        @relation(fields: [userId], references: [id])
  upvotes      Int         @default(0)
  downvotes    Int         @default(0)
  repliesCount Int         @default(0)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  isPinned     Boolean     @default(false)
  Vote         Vote[]
}

model Vote {
  id          String   @id @default(cuid()) @map("_id")
  commentId   String
  userId      String
  voteType    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Comment     Comment  @relation(fields: [commentId], references: [id])
}

model Purchase {
  id          String   @id @default(cuid()) @map("_id")
  userId      String
  courseId    String
  status      String   @default("pending")
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
  course      Course   @relation(fields: [courseId], references: [id])

  @@unique([userId, courseId])
}

model Notification {
  id        String   @id @default(cuid())  @map("_id")
  userId    String
  courseId  String
  amount    Float
  screenshot String
  status    String   @default("pending") 
  message   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id])

  @@index([userId])
  @@index([courseId])
}
